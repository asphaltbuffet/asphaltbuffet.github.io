<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>asphaltbuffet dev blog</title>
    <link>/</link>
    <description>Recent content on asphaltbuffet dev blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 23 Jun 2022 20:16:28 -0400</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Mermaid &#43; Hugo</title>
      <link>/posts/hugo/mermaid/</link>
      <pubDate>Thu, 23 Jun 2022 20:16:28 -0400</pubDate>
      
      <guid>/posts/hugo/mermaid/</guid>
      <description>I learned about Mermaid in 2021 while trying to find a way to better see changes in diagrams at work. Being able to look through a revision history of images was tolerable, but only slightly better than the proverbial needle and the unexplained presense of a nearby haystack.
But Mermaid resolves my complaints by rendering text/code into fairly nice-looking diagrams and visualizations. Some are too plain for my liking (looking at you state diagram), but they convey information graphically.</description>
      <content>&lt;p&gt;I learned about &lt;a href=&#34;http://mermaid-js.github.io/mermaid/&#34;&gt;Mermaid&lt;/a&gt; in 2021 while trying to find a way to better see changes in diagrams at work. Being able to look through a revision history of images was tolerable, but only slightly better than the proverbial needle and the unexplained presense of a nearby haystack.&lt;/p&gt;
&lt;p&gt;But Mermaid resolves my complaints by rendering text/code into fairly nice-looking diagrams and visualizations. Some are too plain for my liking (looking at you state diagram), but they convey information graphically. That&amp;rsquo;s all I&amp;rsquo;m really looking to get here.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;mermaid.md#tldr&#34;&gt;tldr;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;complicating-it-all-lets-make-a-website&#34;&gt;Complicating It All; Let&amp;rsquo;s Make a Website&lt;/h1&gt;
&lt;p&gt;Mermaid files are just fine when they&amp;rsquo;re used in a README (GitHub supports Mermaid already in its markdown) or project documentation. If I want to also post them on here, we have a problem.&lt;/p&gt;



  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;391764852&#34; type=&#34;checkbox&#34;  /&gt;
    &lt;label for=&#34;391764852&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;markdown&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__title&#34;&gt;I want this to be pretty&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;show&#34; data-label-collapse=&#34;hide&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-markdown&#34; &gt;&lt;code&gt;
```mermaid
graph TD
    A[Christmas] --&amp;gt;|Get money| B(Go shopping)
    B --&amp;gt; C{Let me think}
    C --&amp;gt; D[Laptop]
    C --&amp;gt; |Bleh| E[iPhone]
    C --&amp;gt; F[Car]
```
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;


&lt;p&gt;Ok, an inconvenience at the least. Hugo doesn&amp;rsquo;t know about Mermaid. Not in the slightest. I guess it&amp;rsquo;s time to figure out how to get that working.&lt;/p&gt;
&lt;h2 id=&#34;adding-mermaid-to-hugo&#34;&gt;Adding Mermaid to Hugo&lt;/h2&gt;
&lt;p&gt;One option is to change my theme to something that has Mermaid built-in. &lt;a href=&#34;https://www.docsy.dev/&#34;&gt;Docsy&lt;/a&gt; is an example of this, but that isn&amp;rsquo;t something I want to consider for the site right now. I could also compile the image with Mermaid&amp;rsquo;s live editor (or use their CLI locally), but again, the intent is to keep everything together. Cats and dogs; living together.&lt;/p&gt;
&lt;p&gt;What I really want is a shortcode like &lt;code&gt;{{&amp;lt; code [...] &amp;gt;}}&lt;/code&gt; that will let me do it inline. Following the directions from &lt;a href=&#34;https://satoru.dev/2020/08/using-mermaid-in-hugo/&#34;&gt;satoru.dev&lt;/a&gt;, I expected that I&amp;rsquo;d found the perfect example and implementation. Nope. Does nothing.&lt;/p&gt;
&lt;p&gt;I checked to make sure I had spelled things correctly, placed them in the right place&amp;hellip; Oh. Reading the article again, I see that I needed to put the shortcode in &lt;code&gt;layouts/shortcodes/mermaid.html&lt;/code&gt;, but where the site had said,&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Find somewhere in your theme that&amp;rsquo;s suitable for adding a &lt;!-- raw HTML omitted --&gt; [&amp;hellip;]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I had not really done the &amp;lsquo;suitable&amp;rsquo; part of it &amp;ndash; and would continue to fail at this part. Clues on the &lt;a href=&#34;https://discourse.gohugo.io/t/javascript-on-page/4166/4&#34;&gt;Hugo Discourse&lt;/a&gt;, &lt;a href=&#34;https://gohugo.io/templates/shortcode-templates/&#34;&gt;RTFM&lt;/a&gt;, &lt;a href=&#34;https://github.com/panr/hugo-theme-terminal&#34;&gt;RTF(Theme)M&lt;/a&gt;, and investigation of the &lt;code&gt;layouts/partial/extended_footer.html&lt;/code&gt; file got me a bit closer. Nope. RTFM again and look at &lt;a href=&#34;https://github.com/matcornic/hugo-theme-learn/&#34;&gt;example theme&lt;/a&gt; with Mermaid included&amp;hellip; and a little bit at the end of Alexandra Souly&amp;rsquo;s &lt;a href=&#34;https://towardsdatascience.com/mermaid-create-diagrams-quickly-and-effortlessly-d236e23d6d58&#34;&gt;article&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I am convinced at this point that I have fully grokked the situation. I am a god amongst men (actually, no, my self-esteem would never get there&amp;hellip;). Update. Refresh.&lt;/p&gt;
&lt;p&gt;Frak.&lt;/p&gt;
&lt;p&gt;Time to look at raw page source. Hmm, there isn&amp;rsquo;t one iota of reference to the mermaid.min.js script. Time for an equivalant form of print statement debugging. Adding &lt;code&gt;&amp;lt;meta property=&amp;quot;TESTING&amp;quot; content=&amp;quot;TESTING&amp;quot; /&amp;gt;&lt;/code&gt; right after the script should do the trick. And its absence is deafening. Some debugging, some tea, and a last ditch effort to look for any bugs in the theme that would cause this and I see it.&lt;/p&gt;
&lt;p&gt;I want you to know that I could have deleted all of this. I &lt;strong&gt;could&lt;/strong&gt; have. Do you remember that foreshadowing about failing to find a suitable place for things.&lt;/p&gt;



  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;716543298&#34; type=&#34;checkbox&#34;  /&gt;
    &lt;label for=&#34;716543298&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;zsh&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__title&#34;&gt;mistakes were made&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;show&#34; data-label-collapse=&#34;hide&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-zsh&#34; &gt;&lt;code&gt;
2022-06-24 00:38:05 EDT in blog on  main [⇡!?]
➜ tree layouts
layouts
└── shortcodes
    ├── mermaid.html
    └── partials
        ├── comments.html
        └── extended_footer.html
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;


&lt;p&gt;Yes, I failed to pay attention and created &lt;code&gt;layouts/shortcodes/partials&lt;/code&gt; instead of &lt;code&gt;layouts/partials&lt;/code&gt;. The first resource was correct and I have it working.&lt;/p&gt;
&lt;div class=&#34;mermaid&#34; style=&#34;text-align: center&#34;&gt;
    
graph TD
    A[Christmas] --&gt;|Get money| B(Go shopping)
    B --&gt; C{Let me think}
    C --&gt; D[Laptop]
    C --&gt; |Bleh| E[iPhone]
    C --&gt; F[Car]

&lt;/div&gt;
&lt;p&gt;That&amp;rsquo;s great. Seriously. I&amp;rsquo;m happy now and tired and a little thirsty. This should take the typical person a few minutes to get this working.&lt;/p&gt;
&lt;h2 id=&#34;tldr&#34;&gt;tldr;&lt;/h2&gt;
&lt;p&gt;First, create a shortcode in &lt;code&gt;layouts/shortcodes/mermaid.html&lt;/code&gt;. I added some extra sugar here so that I can center it and make it look &lt;em&gt;just&lt;/em&gt; right.&lt;/p&gt;



  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;183967245&#34; type=&#34;checkbox&#34;  /&gt;
    &lt;label for=&#34;183967245&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;html&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__title&#34;&gt;mermaid.html&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;show&#34; data-label-collapse=&#34;hide&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-html&#34; &gt;&lt;code&gt;
&amp;lt;div class=&amp;#34;mermaid&amp;#34; style=&amp;#34;text-align: {{ .Get 0 }}&amp;#34;&amp;gt;
    {{.Inner}}
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;


&lt;p&gt;Then update &lt;code&gt;layouts/partials/extended_footer.html&lt;/code&gt; to call the script that will look for the mermaid class and render it. If the file doesn&amp;rsquo;t already exist, you can create it or copy the example from &lt;code&gt;themes/layouts/partials/extended_footer.html&lt;/code&gt; (which is a file that only contains a comment saying that you should create the file).&lt;/p&gt;



  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;639724815&#34; type=&#34;checkbox&#34;  /&gt;
    &lt;label for=&#34;639724815&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;html&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__title&#34;&gt;extended_footer.html&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;show&#34; data-label-collapse=&#34;hide&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-html&#34; &gt;&lt;code&gt;
{{ if (.Params.mermaid) }}
 &amp;lt;!-- MermaidJS support --&amp;gt;
 &amp;lt;script async src=&amp;#34;https://unpkg.com/mermaid/dist/mermaid.min.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt;
{{ end }}
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;


&lt;p&gt;This is wrapped in a check for frontmatter on the page that lets you choose which pages get that loaded. Generally a good idea to only load on pages that need it. Saves a bit of loading time and data transfer. We&amp;rsquo;re doing this all to have a zippy site, right? So the last setup bit is to update the page frontmatter.&lt;/p&gt;



  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;156943278&#34; type=&#34;checkbox&#34;  /&gt;
    &lt;label for=&#34;156943278&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;yaml&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__title&#34;&gt;frontmatter&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;show&#34; data-label-collapse=&#34;hide&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-yaml&#34; &gt;&lt;code&gt;
title: &amp;#34;Mermaid &amp;#43; Hugo&amp;#34;
author: &amp;#34;Ben&amp;#34;
tags:
  - mermaid
mermaid: true
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;


&lt;p&gt;That&amp;rsquo;s it. You can use it as so:&lt;/p&gt;



  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;584739612&#34; type=&#34;checkbox&#34;  /&gt;
    &lt;label for=&#34;584739612&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;markdown&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__title&#34;&gt;example shortcode&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;show&#34; data-label-collapse=&#34;hide&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-markdown&#34; &gt;&lt;code&gt;
{{&amp;lt; mermaid center &amp;gt;}}
graph TD
    A[Christmas] --&amp;gt;|Get money| B(Go shopping)
    B --&amp;gt; C{Let me think}
    C --&amp;gt; D[Laptop]
    C --&amp;gt; |Bleh| E[iPhone]
    C --&amp;gt; F[Car]
{{&amp;lt; /mermaid &amp;gt;}}
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;





  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;723514968&#34; type=&#34;checkbox&#34;  /&gt;
    &lt;label for=&#34;723514968&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;html&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__title&#34;&gt;example output&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;show&#34; data-label-collapse=&#34;hide&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-html&#34; &gt;&lt;code&gt;
&amp;lt;div class=&amp;#34;mermaid&amp;#34; style=&amp;#34;text-align: center&amp;#34;&amp;gt;
    
graph TD
    A[Christmas] --&amp;gt;|Get money| B(Go shopping)
    B --&amp;gt; C{Let me think}
    C --&amp;gt; D[Laptop]
    C --&amp;gt; |Bleh| E[iPhone]
    C --&amp;gt; F[Car]

&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;


</content>
    </item>
    
    <item>
      <title>Designing a Side Project: Wherehouse</title>
      <link>/posts/projects/designing-a-side-project/</link>
      <pubDate>Wed, 22 Jun 2022 00:04:30 -0400</pubDate>
      
      <guid>/posts/projects/designing-a-side-project/</guid>
      <description>Time for a new project.
The idea of an application that would help me track all my stuff has been rattling around in the noggin for quite a while. At one point, I&amp;rsquo;d hoped that maybe I could get Google Assistant to give some verbal means to tell me where I put that #2 Phillips screwdriver. A couple days of poking at IFTTT later&amp;hellip; idea abandoned.
But now, it came back (I still don&amp;rsquo;t know where that screwdriver is) and my thought is this would be a great way to expand my knowledge/practice of go, and databases, and REST and APIs and&amp;hellip; well, there&amp;rsquo;s a lot of things I can poke at here.</description>
      <content>&lt;p&gt;Time for a new project.&lt;/p&gt;
&lt;p&gt;The idea of an application that would help me track all my stuff has been rattling around in the
noggin for quite a while. At one point, I&amp;rsquo;d hoped that maybe I could get Google Assistant to give
some verbal means to tell me where I put that #2 Phillips screwdriver. A couple days of poking at
IFTTT later&amp;hellip; idea abandoned.&lt;/p&gt;
&lt;p&gt;But now, it came back (I still don&amp;rsquo;t know where that screwdriver is) and my thought is this would
be a great way to expand my knowledge/practice of go, and databases, and REST and APIs and&amp;hellip; well,
there&amp;rsquo;s a lot of things I can poke at here.&lt;/p&gt;
&lt;h2 id=&#34;first-steps&#34;&gt;First Steps&lt;/h2&gt;
&lt;p&gt;Rather than jumping right into the code, I brought up the old daily journal app (see Obsidian) and
created a new collection (see Bullet Journaling). For the really wild part, I stopped with code once
I had the basic core repo set up and building. Did that take half a day? Yes. Did I stop immediately
without going any further? Mostly. I count this as a huge success though. Figuring out a better name
after I set up the repo and now I need to do some conversion&amp;hellip; well, it was 90% success at least.&lt;/p&gt;
&lt;h2 id=&#34;design&#34;&gt;Design&lt;/h2&gt;
&lt;p&gt;So, back in my journal, I created a high-level summary of the project and then a page to start
listing out my subcommands. It feels a bit like code, but the main benefit is that I&amp;rsquo;m rounding out
&lt;strong&gt;what&lt;/strong&gt; I want this thing to look like when using it. So far, very good results. I have iterated a
few times on how the command structure looks and had to make some decisions about what kind of
information I would want to include. There are notes on first deliverable functionality, ideas for
the future, and it&amp;rsquo;s saving a lot of time.&lt;/p&gt;
&lt;p&gt;An interesting discovery after doing some of this work is that it highlights the usefulness of a
flowchart or state diagram of some sort. A means to visualize where application flow would happen
and help define test cases and expectations. It also feeds into user documentation nicely too.&lt;/p&gt;
&lt;h2 id=&#34;output&#34;&gt;Output&lt;/h2&gt;
&lt;p&gt;Currently, the document looks like this:&lt;/p&gt;



  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;843597126&#34; type=&#34;checkbox&#34;  /&gt;
    &lt;label for=&#34;843597126&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;markdown&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__title&#34;&gt;subcommands.md&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;show&#34; data-label-collapse=&#34;hide&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-markdown&#34; &gt;&lt;code&gt;
---
date created: Sunday, June 19th, 2022 12:09:41 pm
date modified: Wednesday, June 22nd, 2022 12:53:45 am
title: subcommands
---

# subcommands

%%TODO: rename ‘name’ to ‘thing’%%

## `store [name] in [location]`

- adds item &amp;#39;name&amp;#39; into storage &amp;#39;location&amp;#39;

## `use [name] from [location]`

- pull item &amp;#39;name&amp;#39; out of storage &amp;#39;location&amp;#39; temporarily and track in ephemeral place while in use.
- Intended to be relevant when calling the &amp;#39;cleanup&amp;#39; subcommand.

## `find [name]`

- return list of storage locations that contain an item called &amp;#39;name&amp;#39;

## `rename [name]-[id] to [name]`

- change the name of specific item
- id would use a unique (but easy to input) identifier in the event multiple things have same name
- TODO: should each item have a unique name?
- TODO: should application tell user what the unique name is when they add something to tracking?

## `cleanup`

- Lists of all items that have been ‘used’ but not `put-away`
- include storage locations to assist in returning them to right place

## `put-away [name] (in &amp;lt;location&amp;gt;)`

- remove item from ephemeral storage
- adding a different location than previously recorded would be equivalent to &amp;#39;put-away&amp;#39; and &amp;#39;move&amp;#39; commands

## `move [name] from [location] to [location]`

- change storage location for that item

## `remove [name] from [location]`

- stop tracking specified item
- TODO: does this permanently delete the item or just flag as removed?

## `borrow [name] from [person]`

- add item to a special location for borrowed items
- TODO: ability to add item to a storage location?
- TODO: is this something that should be tracked with location like other items but a flag to indicate borrowed?

## `lend [name] to [person]`

- take out of storage location (like use)
- set flag that it is now loaned
- TODO: ability to set return date?
- TODO: autocomplete people from history?
- TODO: add contact info for a person?

## `return [name]`

- functionally very similar to put away
- removes borrow/loaned flags
- TODO: add ability to change location here too?

## `organize`

- Group items (like with like) and generate report that highlights discrepancies.
- TODO: may need some metadata to help determine which things are “alike”

## `places`

- list out all storage locations

## `inventory`

- Generate a list of all tracked items, locations, quantities, and status (loaned/borrowed)
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;


</content>
    </item>
    
    <item>
      <title>Beginnings</title>
      <link>/posts/beginnings/</link>
      <pubDate>Tue, 21 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/beginnings/</guid>
      <description>Beginnings While I’ve blogged before, there is a need to have a common place to put development updates, tricks learned, and simply to show off when I think I’m being particularly clever.
So exists this place to serve that purpose.</description>
      <content>&lt;h1 id=&#34;beginnings&#34;&gt;Beginnings&lt;/h1&gt;
&lt;p&gt;While I’ve blogged before, there is a need to have a common place to put development updates, tricks learned, and simply to show off when I think I’m being particularly clever.&lt;/p&gt;
&lt;p&gt;So exists this place to serve that purpose.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>About</title>
      <link>/about/</link>
      <pubDate>Mon, 20 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>/about/</guid>
      <description>tldr; I am Ben, and I make things.
Software Development GitHub Snapcraft Notable Projects Ogma GitHub: ogma Snapcraft: ogma Go Project Template GitHub: seed Wherehouse GitHub: warehouse </description>
      <content>&lt;h1 id=&#34;tldr&#34;&gt;tldr;&lt;/h1&gt;
&lt;p&gt;I am Ben, and I make things.&lt;/p&gt;
&lt;h2 id=&#34;software-development&#34;&gt;Software Development&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/asphaltbuffet&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://snapcraft.io/search?q=asphaltbuffet&#34;&gt;Snapcraft&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;notable-projects&#34;&gt;Notable Projects&lt;/h2&gt;
&lt;h3 id=&#34;ogma&#34;&gt;Ogma&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;GitHub: &lt;a href=&#34;https://github.com/asphaltbuffet/ogma&#34;&gt;ogma&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Snapcraft: &lt;a href=&#34;https://snapcraft.io/warehouse&#34;&gt;ogma&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;go-project-template&#34;&gt;Go Project Template&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;GitHub: &lt;a href=&#34;https://github.com/asphaltbuffet/seed&#34;&gt;seed&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;wherehouse&#34;&gt;Wherehouse&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;GitHub: &lt;a href=&#34;https://github.com/asphaltbuffet/warehouse&#34;&gt;warehouse&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
  </channel>
</rss>
